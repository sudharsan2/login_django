# Generated by Django 5.0.2 on 2024-02-27 07:38

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='addUserExcel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('excelFile', models.FileField(upload_to='uploads/')),
            ],
        ),
        migrations.CreateModel(
            name='arrears',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('count', models.IntegerField()),
            ],
        ),
        migrations.CreateModel(
            name='CIRData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('empId', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=10)),
            ],
        ),
        migrations.CreateModel(
            name='gender',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='jobPreRequisites',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('requisites', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Qualification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('qualification_name', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='userRoles',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(default='student', max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='jobDescription',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('role', models.CharField(max_length=100)),
                ('preRequisites', models.ManyToManyField(to='users.jobprerequisites')),
            ],
        ),
        migrations.CreateModel(
            name='companyData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('companyName', models.CharField(max_length=100)),
                ('companyDescription', models.TextField(null=True)),
                ('CGPA_Required', models.FloatField()),
                ('CTC', models.CharField(max_length=20)),
                ('serviceAgreement', models.CharField(max_length=30)),
                ('trainingPeriodandStipend', models.TextField()),
                ('workLocation', models.CharField(max_length=100)),
                ('evalationProcess', models.TextField()),
                ('eligibleDepartments', models.ManyToManyField(to='users.department')),
                ('jobRole', models.ManyToManyField(to='users.jobdescription')),
                ('qualification', models.ManyToManyField(to='users.qualification')),
            ],
        ),
        migrations.CreateModel(
            name='studentData',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('rollNo', models.CharField(max_length=50)),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('CGPA', models.FloatField()),
                ('arrear_history', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='arrears_history', to='users.arrears')),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='department', to='users.department')),
                ('gender', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='gender', to='users.gender')),
                ('standing_Arrears', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='arrears_standing', to='users.arrears')),
            ],
        ),
        migrations.CreateModel(
            name='user',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('email', models.EmailField(max_length=50, unique=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_super', models.BooleanField(default=False)),
                ('username', models.CharField(max_length=255, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('roles', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='userRole', to='users.userroles')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
        ),
    ]
